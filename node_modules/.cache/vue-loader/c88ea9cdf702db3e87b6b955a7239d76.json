{"remainingRequest":"/Users/alvarodgzz/Documents/7mo/desarrolloWeb/resumePageAlvaroRdz/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/alvarodgzz/Documents/7mo/desarrolloWeb/resumePageAlvaroRdz/client/src/components/Lander.vue?vue&type=template&id=2860ca08&scoped=true&","dependencies":[{"path":"/Users/alvarodgzz/Documents/7mo/desarrolloWeb/resumePageAlvaroRdz/client/src/components/Lander.vue","mtime":1603854982420},{"path":"/Users/alvarodgzz/Documents/7mo/desarrolloWeb/resumePageAlvaroRdz/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/alvarodgzz/Documents/7mo/desarrolloWeb/resumePageAlvaroRdz/client/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/alvarodgzz/Documents/7mo/desarrolloWeb/resumePageAlvaroRdz/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/alvarodgzz/Documents/7mo/desarrolloWeb/resumePageAlvaroRdz/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}